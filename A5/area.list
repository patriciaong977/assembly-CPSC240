     1                                  ;============================================================================================================
     2                                  ; Program name: Area of Triangle
     3                                  ;               This program will input three quadword float numbers representing the sides of a triangle.
     4                                  ;                   After confirming that the inputs are in fact valid floats then computer the area of
     5                                  ;                   the triangle using Heron's formula. 
     6                                  ;              
     7                                  ; File: area.asm
     8                                  ; File Description: Finds the area of a triangle. 
     9                                  ;
    10                                  ; Author: Patricia Ong
    11                                  ; Email: patricia.ong977@csu.fullerton.edu
    12                                  ; Institution: California State University, Fullerton.
    13                                  ;
    14                                  ; Link object file command: g++ -m64 -no-pie -o executable.out -std=c11 area.o isfloat.o triangle.o
    15                                  ;
    16                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU
    17                                  ; General Public License version 3 as published by the Free Software Foundation.
    18                                  ; This program is distributed in hope that it will be useful, but WITHOUT ANY WARRANTy; without even the 
    19                                  ; implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
    20                                  ; for more details.
    21                                  ; A copy of the GNU General Public License v3 is available here: <https://www.gnu.org/Licenses/> 
    22                                  ;============================================================================================================
    23                                  
    24                                  extern scanf                ;To input
    25                                  
    26                                  extern printf               ;To output
    27                                  
    28                                  extern isfloat              ;External C++ function for validating ifuser input is a float.
    29                                  
    30                                  extern atof                 ;External function that takes string to float. 
    31                                  
    32                                  global area                 ;Makes area callable by functions outside of this file.
    33                                                                  ;For triangle.c to call area.asm
    34                                  
    35                                  section .data
    36                                  
    37 00000000 506C6561736520656E-         inputPrompt db "Please enter the floating point lengths of the 3 sides of your triangle. ", 0x0A, 0 ;0 = null, 0x0A = new line
    37 00000009 746572207468652066-
    37 00000012 6C6F6174696E672070-
    37 0000001B 6F696E74206C656E67-
    37 00000024 746873206F66207468-
    37 0000002D 652033207369646573-
    37 00000036 206F6620796F757220-
    37 0000003F 747269616E676C652E-
    37 00000048 200A00             
    38 0000004B 5369646520313A2000-         sideOne db "Side 1: ", 0, 0x0A
    38 00000054 0A                 
    39 00000055 5369646520323A2000-         sideTwo db "Side 2: ", 0, 0x0A
    39 0000005E 0A                 
    40 0000005F 5369646520333A2000-         sideThree db "Side 3: ", 0, 0x0A
    40 00000068 0A                 
    41 00000069 54686573652076616C-         receivedValues db "These values were received:  %.8lf  %.8lf  %.8lf ", 0x0A, 0
    41 00000072 756573207765726520-
    41 0000007B 72656365697665643A-
    41 00000084 2020252E386C662020-
    41 0000008D 252E386C662020252E-
    41 00000096 386C66200A00       
    42 0000009C 546865206172656120-         triangleArea db "The area of this triangle is %.8lf square meters. ", 0x0A, 0
    42 000000A5 6F6620746869732074-
    42 000000AE 7269616E676C652069-
    42 000000B7 7320252E386C662073-
    42 000000C0 7175617265206D6574-
    42 000000C9 6572732E200A00     
    43 000000D0 416E20696E76616C69-         errorMsg db "An invalid input was detected. Please run the program again.", 0x0A, 0
    43 000000D9 6420696E7075742077-
    43 000000E2 617320646574656374-
    43 000000EB 65642E20506C656173-
    43 000000F4 652072756E20746865-
    43 000000FD 2070726F6772616D20-
    43 00000106 616761696E2E0A00   
    44                                  
    45 0000010E 257300                      stringFormat db "%s", 0
    46 00000111 256C66000A                  floatFormat db "%lf", 0, 0x0A
    47                                  
    48                                  section .bss
    49                                  
    50                                  section .text
    51                                  
    52                                  area:
    53                                      ;Align the stack
    54 00000000 55                          push rbp                ;1 -- The stack is originally not aligned.
    55 00000001 4889E5                      mov rbp, rsp            ;rbp holds the address of the start of this new stack
    56                                  
    57                                      ;16 pushes
    58 00000004 57                          push rdi ;2
    59 00000005 56                          push rsi ;3
    60 00000006 52                          push rdx ;4
    61 00000007 51                          push rcx ;5
    62 00000008 4150                        push r8  ;6
    63 0000000A 4151                        push r9  ;7
    64 0000000C 4152                        push r10 ;8
    65 0000000E 4153                        push r11 ;9
    66 00000010 4154                        push r12 ;10
    67 00000012 4155                        push r13 ;11
    68 00000014 4156                        push r14 ;12
    69 00000016 4157                        push r15 ;13
    70 00000018 53                          push rbx ;14
    71 00000019 9C                          pushf ;15
    72                                      ;push rax ;16
    73                                  
    74                                  ;---------------------------------------------------------------------------------------------------------------------------------
    75                                      ;Print Input Prompt
    76 0000001A 4831C0                      xor rax, rax            ;Does the same as mov rax, 0. (Faster)
    77 0000001D 48BF-                       mov rdi, stringFormat   ;%s
    77 0000001F [0E01000000000000] 
    78 00000027 48BE-                       mov rsi, inputPrompt    ;"Please enter the floating point lengths of the 3 sides of your triangle. "
    78 00000029 [0000000000000000] 
    79 00000031 E8(00000000)                call printf
    80                                  
    81                                  ;---------------------------------------------------------------------------------------------------------------------------------
    82 00000036 4883EC40                    sub rsp, 64             ;Gives space for the input value.
    83 0000003A EB12                        jmp Start               ;Jmp to Start
    84                                  
    85                                  ;----------------------------------------------------------------------------------------------------------
    86                                      ;If Input is not a float, it's Invalid.
    87                                      Invalid:
    88 0000003C 4831C0                      xor rax, rax            ;Does the same as mov rax, 0
    89 0000003F 48BF-                       mov rdi, errorMsg       ;"An invalid input was detected. Please run the program again."
    89 00000041 [D000000000000000] 
    90 00000049 E8(00000000)                call printf
    91                                  
    92                                  ;----------------------------------------------------------------------------------------------------------
    93                                      Start:
    94                                      ;Print Input Side 1
    95 0000004E 4831C0                      xor rax, rax            ;Does the same as mov rax, 0. 
    96 00000051 48BF-                       mov rdi, stringFormat   ;%s
    96 00000053 [0E01000000000000] 
    97 0000005B 48BE-                       mov rsi, sideOne        ;"Side 1: "
    97 0000005D [4B00000000000000] 
    98 00000065 E8(00000000)                call printf
    99                                      ;Get Input for side
   100 0000006A 4831C0                      xor rax, rax            ;Does the same as mov rax, 0.
   101 0000006D 48BF-                       mov rdi, stringFormat   ;"%s"
   101 0000006F [0E01000000000000] 
   102 00000077 4889E6                      mov rsi, rsp            ;Takes top stack into rsi.
   103 0000007A E8(00000000)                call scanf
   104                                  
   105                                      ;Check if Input is a float
   106 0000007F 4889E7                      mov rdi, rsp            ;Stack pointer to rdi (holds string input).
   107 00000082 B801000000                  mov rax, 1              
   108 00000087 E8(00000000)                call isfloat            ;Checking if it is a float, should return rax with value.
   109                                  
   110 0000008C 41BF00000000                mov r15, 0              ;mov 0 to r15
   111 00000092 4C39F8                      cmp rax, r15            ;Cmp to r15 to rax, if rax is == to r15 then Jump near if equal.  
   112 00000095 74A5                        je Invalid              ;Invalid shows that there was an invalid input.
   113                                  
   114                                      ;If valid,
   115 00000097 B800000000                  mov rax, 0
   116 0000009C 4889E7                      mov rdi, rsp           ;Mov stack pointer to rdi 
   117 0000009F E8(00000000)                call atof              ;Takes the value in rsp (stack) into xmm0.
   118 000000A4 F2440F10F8                  movsd xmm15, xmm0      ;mov the value of rsp to xmm15 (xmm15 has the input value side one)
   119                                  
   120                                  ;----------------------------------------------------------------------------------------------------------
   121                                      ;Print Input Side 2
   122 000000A9 4831C0                      xor rax, rax            ;Does the same as mov rax, 0. 
   123 000000AC 48BF-                       mov rdi, stringFormat   ;%s
   123 000000AE [0E01000000000000] 
   124 000000B6 48BE-                       mov rsi, sideTwo        ;"Side 2: "
   124 000000B8 [5500000000000000] 
   125 000000C0 E8(00000000)                call printf
   126                                  
   127 000000C5 4831C0                      xor rax, rax            ;Does the same as mov rax, 0.
   128 000000C8 48BF-                       mov rdi, stringFormat   ;"%s"
   128 000000CA [0E01000000000000] 
   129 000000D2 4889E6                      mov rsi, rsp            ;Takes top stack into rsi.
   130 000000D5 E8(00000000)                call scanf
   131                                  
   132                                      ;Check if Input is a float
   133 000000DA 4889E7                      mov rdi, rsp            ;Stack pointer to rdi (holds string input).
   134 000000DD B801000000                  mov rax, 1
   135 000000E2 E8(00000000)                call isfloat            ;Checking if it is a float, should return rax with value.
   136                                  
   137 000000E7 41BF00000000                mov r15, 0              ;mov 0 to r15
   138 000000ED 4C39F8                      cmp rax, r15            ;Cmp to r15 to rax, if rax is == to r15 then Jump near if equal.
   139 000000F0 0F8446FFFFFF                je Invalid              ;Invalid shows that there was an invalid input.
   140                                  
   141                                      ;If valid, 
   142 000000F6 B800000000                  mov rax, 0
   143 000000FB 4889E7                      mov rdi, rsp           ;Mov stack pointer to rdi
   144 000000FE E8(00000000)                call atof              ;Takes the value in rsp (stack) into xmm0.
   145 00000103 F2440F10F0                  movsd xmm14, xmm0      ;mov the value of rsp to xmm14 (xmm14 has the input value side two)
   146                                  
   147                                  ;---------------------------------------------------------------------------------------------------------
   148                                      ;Print Input Side 3
   149 00000108 4831C0                      xor rax, rax            ;Does the same as mov rax, 0. 
   150 0000010B 48BF-                       mov rdi, stringFormat   ;%s
   150 0000010D [0E01000000000000] 
   151 00000115 48BE-                       mov rsi, sideThree      ;"Side 3: "
   151 00000117 [5F00000000000000] 
   152 0000011F E8(00000000)                call printf
   153                                  
   154 00000124 4831C0                      xor rax, rax            ;Does the same as mov rax, 0.
   155 00000127 48BF-                       mov rdi, stringFormat   ;"%s"
   155 00000129 [0E01000000000000] 
   156 00000131 4889E6                      mov rsi, rsp            ;Takes stack pointer to rsi.
   157 00000134 E8(00000000)                call scanf
   158                                  
   159                                      ;Check if Input is a float
   160 00000139 4889E7                      mov rdi, rsp            ;Mov stack pointer to rdi (holds string input).
   161 0000013C B801000000                  mov rax, 1
   162 00000141 E8(00000000)                call isfloat            ;Checking if it is a float, should return rax with value.
   163                                  
   164 00000146 41BF00000000                mov r15, 0              ;mov 0 to r15
   165 0000014C 4C39F8                      cmp rax, r15            ;Cmp to r15 to rax, if rax is == to r15 then Jump near if equal.
   166 0000014F 0F84E7FEFFFF                je Invalid              ;Invalid shows that there was an invalid input.
   167                                  
   168                                      ;If valid, 
   169 00000155 B800000000                  mov rax, 0
   170 0000015A 4889E7                      mov rdi, rsp            ;Mov stack pointer to rdi.
   171 0000015D E8(00000000)                call atof               ;Takes the value in rsp (stack) into xmm0.
   172 00000162 F2440F10E8                  movsd xmm13, xmm0       ;mov the value of rsp to xmm13 (xmm13 has the input value side three)
   173                                      
   174                                  ;---------------------------------------------------------------------------------------------------------    
   175 00000167 4883C440                    add rsp, 64             ;Reset's the stack, since subtracted earlier.
   176                                      
   177                                      ;Print Received number
   178 0000016B 48BF-                       mov rdi, receivedValues ;"These values were received:  %.8lf  %.8lf  %.8lf " 
   178 0000016D [6900000000000000] 
   179 00000175 B803000000                  mov rax, 3              ;Print 3 floating point
   180 0000017A F2410F10C7                  movsd xmm0, xmm15       ;Print side one
   181 0000017F F2410F10CE                  movsd xmm1, xmm14       ;Print side two
   182 00000184 F2410F10D5                  movsd xmm2, xmm13       ;Print side three
   183 00000189 E8(00000000)                call printf
   184                                      
   185                                  ; --------------------------------------------------- Heron's Formula Here--------------------------------------------------------
   186                                  ; -----------------------S = [(xmm15)+(xmm14)+(xmm13)]/2--------------------------------------------------------------------------
   187                                  
   188                                      ;Set r14 to the value of 2 in hex. (0x4000000000000000)
   189 0000018E 49BE00000000000000-         mov r14, 0x4000000000000000 ;Hex representation of 2 moving to r14
   189 00000197 40                 
   190 00000198 664D0F6EDE                  movq xmm11, r14             ;Allows the mov r14 to xmm11(has the value of 2).
   191                                      
   192                                      ;mov r14, 0x0000000000000000    ;Setting r14 to 0
   193                                      ;movq xmm12, r14                ;Initializing xmm12 to 0. (Value of all Sides = S )
   194                                  
   195 0000019D F2450F10E7                  movsd xmm12, xmm15          ;Adding side1 to xmm12 
   196 000001A2 F2450F58E6                  addsd xmm12, xmm14          ;Adding side2 to xmm12 
   197 000001A7 F2450F58E5                  addsd xmm12, xmm13          ;Adding side3 to xmm12
   198                                  
   199 000001AC F2450F5EE3                  divsd xmm12, xmm11          ;Dividing xmm12 (Value of all Sides = S) to xmm11 (2)
   200                                  
   201                                  ; ----------------------A = sqrt(S[S-A][S-B][S-C])--------------------------------------------------------------------------------
   202                                      
   203 000001B1 F2450F10DC                  movsd xmm11, xmm12          ;Mov xmm12(Value of all Sides) to xmm11
   204 000001B6 F2450F5CDF                  subsd xmm11, xmm15          ;xmm11(S) - xmm15(side1)
   205 000001BB F2450F10FB                  movsd xmm15, xmm11          ;Mov xmm11 to xmm15 (S-A)
   206                                  
   207 000001C0 F2450F10DC                  movsd xmm11, xmm12          ;Mov xmm12(Value of all Sides) to xmm11
   208 000001C5 F2450F5CDE                  subsd xmm11, xmm14          ;xmm11(S) - xmm14(side2)
   209 000001CA F2450F10F3                  movsd xmm14, xmm11          ;Mov xmm11 to xmm14 (S-B)
   210                                      
   211 000001CF F2450F10DC                  movsd xmm11, xmm12          ;Mov xmm12(Value of all Sides) to xmm11
   212 000001D4 F2450F5CDD                  subsd xmm11, xmm13          ;xmm11(S) - xmm14(side3)
   213 000001D9 F2450F10EB                  movsd xmm13, xmm11          ;Mov xmm11 to xmm13 (S-C)
   214                                  
   215 000001DE F2450F59E7                  mulsd xmm12, xmm15          ;xmm15 * xmm12
   216 000001E3 F2450F59E6                  mulsd xmm12, xmm14          ;xmm14 * xmm12
   217 000001E8 F2450F59E5                  mulsd xmm12, xmm13          ;xmm13 * xmm12
   218                                  
   219 000001ED F2450F51FC                  sqrtsd xmm15, xmm12         ;Sqrt(xmm11) and move it to xmm15(Area of Triangle)
   220                                  
   221                                  ;--------------------------------------------------------------------------------------------------------------------------------
   222                                      ;Print Area of the Triangle
   223 000001F2 4831C0                      xor rax, rax
   224 000001F5 48BF-                       mov rdi, triangleArea   ;"The area of this triangle is %.8lf square meters. "
   224 000001F7 [9C00000000000000] 
   225 000001FF B801000000                  mov rax, 1              ;Print 1 floating point
   226 00000204 F2410F10C7                  movsd xmm0, xmm15       ;Print Area of Triangle (xmm12 = area of triangle)
   227 00000209 E8(00000000)                call printf
   228                                  
   229 0000020E F2410F10C7                  movsd xmm0, xmm15      ;Return value to main (xmm12 = area of triangle)      
   230                                  
   231                                      ;ucomisd                ;Don't have to do. Changed isfloat to accept only positive numbers. 
   232                                  ;----------------------------------------------------------------------------------------------------------------------------------
   233                                      
   234                                      ;16 pops
   235                                      ;pop rax ;16
   236 00000213 9D                          popf ;15
   237 00000214 5B                          pop rbx ;14
   238 00000215 415F                        pop r15 ;13
   239 00000217 415E                        pop r14 ;12
   240 00000219 415D                        pop r13 ;11
   241 0000021B 415C                        pop r12 ;10
   242 0000021D 415B                        pop r11 ;9
   243 0000021F 415A                        pop r10 ;8
   244 00000221 4159                        pop r9 ;7
   245 00000223 4158                        pop r8 ;6
   246 00000225 59                          pop rcx ;5
   247 00000226 5A                          pop rdx ;4
   248 00000227 5E                          pop rsi ;3
   249 00000228 5F                          pop rdi ;2
   250 00000229 5D                          pop rbp  ;1
   251 0000022A C3                          ret
